// Updated by Regi
// * Dec 09 2020  using https://github.com/RegiBrazil/dbb-pipeline.git
    println "**Regi IF using VPN it FAILS"
 // *************************************************************//
// Agent labels
def zOsAgentLabel = env.ZOS_AGENT_LABEL ? env.ZOS_AGENT_LABEL : 'e2e-pipeline'
def linuxAgent = 'master'

// GIT repositories
// My Forked repo and branch are below: srcGitRepo  and srcGitBranch
def srcGitRepo =  null
def srcGitBranch = null
def zAppBuildGitRepo = 'https://github.com/IBM/dbb-zappbuild.git'
def zAppBuildGitBranch = 'development' // Some important issues are not yet merged into master.
def dbbGitRepo = 'https://github.com/IBM/dbb.git'
def dbbGitBranch = 'master'

// DBB
// Regi ----------------------------- Build type
//  -i: incremental
//  -f: full
//  -c: only changed source
def dbbHome=null
def dbbUrl=null
def dbbHlq=null
def dbbBuildType='-i'
// def dbbBuildType='-f'
def dbbGroovyzOpts= ''
def dbbBuildExtraOpts= ''

// Artifactory
// def artiCredentialsId = 'artifactory_id'
def artiCredentialsId = null

// UCD
def ucdApplication = 'GenApp_CICS'
def ucdProcess = 'Deploy GenApp Appl to CICS'
def ucdComponent = 'GenApp'
def ucdEnv = 'DEV'
def ucdSite = 'Urbancode server'

// Verbose
def verbose = env.VERBOSE && env.VERBOSE == 'true' ? true : false

// Private
def hasBuildFiles = true
// def buildVerbose = verbose ? '-v' : ''
// ---------------------------Verbose
def buildVerbose = ''
// verbose --> def buildVerbose = '-v'
// ---------------------------Verbose
@NonCPS
String getArtifactoruUrl(String artiUrl) {
    // UCD always add /artifactory
    def exp =  /(.*)\\/artifactory?$/
    def match = artiUrl =~ exp
    if (match.find()) {
        return match.group(1)
    }
    return artiUrl
}


pipeline {

    agent { label linuxAgent }

    options { skipDefaultCheckout(true) }

    stages {
//* ------------------------------------------------------------------------------------------------
        stage('Git Clone/Refresh') {

            agent { label zOsAgentLabel }
            steps {
            echo "Clone from GitHub to Rocket Git on zOS"
                script {
                    if ( verbose ) {
                        echo sh(script: 'env|sort', returnStdout: true)
                    }

                    if ( env.DBB_HOME == null )
                        error("DBB_HOME is not defined !!!")
                    if ( env.DBB_URL == null )
                        error("DBB_URL is not defined !!!")
                    if ( env.DBB_HLQ == null )
                        error("DBB_HLQ is not defined !!!")
   // Regi - NO Artifactory
  //                  if ( env.ARTIFACTORY_URL == null )
  //                      error("ARTIFACTORY_URL is not defined !!!")
  //                  if ( env.ARTIFACTORY_REPO_PATH == null )
  //                      error("ARTIFACTORY_REPO_PATH is not defined !!!")
                    if ( env.UCD_BUZTOOL_PATH == null )
                        error("UCD_BUZTOOL_PATH is not defined !!!")

                    dir('cics-genapp') {
                        sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
// My Forked repo and branch are below: srcGitRepo  and srcGitBranch
                        srcGitRepo = scm.getUserRemoteConfigs()[0].getUrl()
                        srcGitBranch = scm.branches[0].name
                        def scmVars = null
                        scmVars = checkout([$class: 'GitSCM', branches: [[name: srcGitBranch]],
                                                doGenerateSubmoduleConfigurations: false,
                                                extensions: [
                                                [$class: 'SparseCheckoutPaths',
                                                   sparseCheckoutPaths:[[$class:'SparseCheckoutPath',
                                                   path:'cics-genapp/']]]
                                                ],
                                                submoduleCfg: [],
                                                userRemoteConfigs: [[
                                                                     url: srcGitRepo,
                                                                     ]]])
 // Regi - print repo and branch
                    println "*REGI* repo:${srcGitRepo} branch: ${srcGitBranch}"
                    }

                    dir("dbb-zappbuild") {
                        sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
                        def scmVars =
                            checkout([$class: 'GitSCM', branches: [[name: zAppBuildGitBranch]],
                              doGenerateSubmoduleConfigurations: false,
                              submoduleCfg: [],
                            userRemoteConfigs: [[
                                url: zAppBuildGitRepo,
                            ]]])
                    }

                    dir("dbb") {
                        sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
                        def scmVars =
                            checkout([$class: 'GitSCM', branches: [[name: dbbGitBranch]],
                              doGenerateSubmoduleConfigurations: false,
                              extensions: [
                                       [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[[$class:'SparseCheckoutPath', path:'Pipeline/CreateUCDComponentVersion/']]]
                                    ],
                              submoduleCfg: [],
                            userRemoteConfigs: [[
                                url: dbbGitRepo,
                            ]]])
                    }
                }
            }
        }

//* ------------------------------------------------------------------------------------------------
        stage('DBB Build & UnitTest') {
            steps {
                echo "Perform the Build and Unit Tests on required changes"
                script{
                    def zUnitContents = []
                    node( zOsAgentLabel ) {
                        if ( env.DBB_BUILD_EXTRA_OPTS != null ) {
                           dbbBuildExtraOpts = env.DBB_BUILD_EXTRA_OPTS
                        }
                        if ( env.DBB_BUILD_TYPE != null ) {
                            dbbBuildType = env.DBB_BUILD_TYPE
                        }
                        if ( env.GROOVYZ_BUILD_EXTRA_OPTS != null ) {
                            dbbGroovyzOpts = env.GROOVYZ_BUILD_EXTRA_OPTS
                        }
                        dbbHome = env.DBB_HOME
                        dbbUrl = env.DBB_URL
                        dbbHlq = env.DBB_HLQ
  // Regi - print HLQ and DBB Home
      println "*REGI* HLQ:${dbbHlq} DBB Home: ${dbbHome}"
 // Regi - print the path where the Jenkins workspace is created
      println "*REGI* Jenkins workspace created at: ${WORKSPACE} "

     sh "$dbbHome/bin/groovyz $dbbGroovyzOpts ${WORKSPACE}/dbb-zappbuild/build.groovy --logEncoding UTF-8 -w ${WORKSPACE} --application cics-genapp --sourceDir ${WORKSPACE}/cics-genapp  --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER} --hlq ${dbbHlq}.GENAPP --url $dbbUrl -pw ADMIN $dbbBuildType $buildVerbose $dbbBuildExtraOpts"
                        def files = findFiles(glob: "**BUILD-${BUILD_NUMBER}/**/buildList.txt")
                        // Do not enter into some steps if nothing in the build list
                        hasBuildFiles = files.length > 0 && files[0].length > 0

                        def zUnitFiles = findFiles(glob: "**BUILD-${BUILD_NUMBER}/**/*.zunit.report.log")
                        zUnitFiles.each { zUnit ->
      println "Process zUnit: $zUnit.path"
                            def zUnitContent = readFile file: zUnit.path
                            zUnitContents << zUnitContent
                        }
                    }
                    zUnitContents.each { zUnitContent ->
                        writeFile file: '/tmp/zUnit.zunit', text:zUnitContent
                        def rc = sh (returnStatus: true, script: '''#!/bin/sh
                            curl --silent https://raw.githubusercontent.com/ibm/dbb-pipeline/master/cics-genapp/zUnit/xsl/AZUZ2J30.xsl -o /tmp/AZUZ2J30.xsl
                            xsltproc /tmp/AZUZ2J30.xsl /tmp/zUnit.zunit > ${WORKSPACE}/zUnit.xml
                        ''')
                        junit "zUnit.xml"
                    }
                }
            }
            post {
                always {
                    node( zOsAgentLabel ) {
                        dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
                            archiveArtifacts allowEmptyArchive: true,
                                            artifacts: '**/*.log,**/*.json,**/*.html',
                                            excludes: '**/*clist',
                                            onlyIfSuccessful: false
                        }
                    }
                }
            }
        }

//* ------------------------------------------------------------------------------------------------
        stage('UCD Package') {
            steps {
                echo "Move the binaries created by build to UCD to be deployed"
                script {
                    node( zOsAgentLabel ) {
                        if ( hasBuildFiles ) {
                            def ucdBuztool = env.UCD_BUZTOOL_PATH
 // Regi - print UCD Buzztool path
         println "*REGI* UCD BUZTOOL_PATH : ${ucdBuztool} "
   BUILD_OUTPUT_FOLDER = sh (script: "ls ${WORKSPACE}/BUILD-${BUILD_NUMBER}", returnStdout: true).trim()
   dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER}") {
   println "*REGI* Push to UCD Code station"
    sh "$dbbHome/bin/groovyz $dbbGroovyzOpts ${WORKSPACE}/dbb/Pipeline/CreateUCDComponentVersion/dbb-ucd-packaging.groovy --buztool ${ucdBuztool} --component ${ucdComponent} --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER} "
                            }
                        }
                    }
                }
            }
        }

//* ------------------------------------------------------------------------------------------------
        stage('UCD Deploy') {
            steps {
                echo "Invoke UCD and wait for the deplyment to be completed"
   println "*REGI* Deploy Appl: ${ucdApplication} Process: ${ucdProcess}  to Environmnet :${ucdEnv}  on CICSTS53"
                script{
                    if ( hasBuildFiles ) {
                        script{
                            step(
                                  [$class: 'UCDeployPublisher',
                                    deploy: [
                                        deployApp: ucdApplication,
                                        deployDesc: 'Requested from Jenkins',
                                        deployEnv: ucdEnv,
                                        deployOnlyChanged: false,
                                        deployProc: ucdProcess,
                                        deployVersions: ucdComponent + ':latest'],
                                    siteName: ucdSite])
                        }
                    }
                }
            }
        }
    }
}
